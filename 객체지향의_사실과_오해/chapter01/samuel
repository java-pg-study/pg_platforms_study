객체 지향 프로그래밍의 오해: 현실 속에 존재하는 사물 혹은 사람들을 모방한 프로그래밍
- 현실 속에 존재하는 사물 혹은 사람들을 소프트웨어로 추상화 시키기 위해서는 먼저 전제가 필요합니다.
- 이 전제는 어플리케이션의 객체에 직접적으로 대응하는 사물 혹은 사람이 존재해야 하는 것입니다.
- 하지만 실세계를 보면 직접적으로 대응하는 것 보다 대응하지 않는 것이 더 많습니다.
- 결과적으로 객체 지향 프로그래밍을 "실세계의 모방"으로 본다면 객체 지향 프로그래밍의 철학과는 동 떨어진 관점으로 해석을 하는 것입니다.
- 그럼에도 불구하고 여전히 "실세계의 모방"이라는 유산을 사용하는 이유는 객체 지향을 처음 학습하는 시점에서 굉장히 효율적이기 때문입니다. 

객체 지향 프로그래밍의 사실: 사용자가 만족 할 수 있도록 실세계를 소프트웨어 세계로 재창조 하는 프로그래밍
- "버트란드 마이어"에 따르면 "실재와 소프트웨어 시스템의 거리는 먼 친척이다"라고 표현을 했습니다.
- 즉 실세계와 소프트트웨어 세계는 충분한 이질감이 존재하며 이를 인정해야 합니다.

객체 지향의 중요한 3요소
- "커피 공화국의 아침"을 읽어보면 커피를 주문하는 과정을 예시로 "책임", "역할", "협력"이라는 키워드가 반복적으로 나타납니다.
- 해당 내용을 읽어보시면 "고객 <-> Cashier <-> 바리스타"에서 각 객체의 책임과 역할 그리고 협력이 어떤 의미인지 알 것이라 생각이 듭니다.
- 개인적으로 이 부분에서 중요하다고 생각한 내용은 "협력"은 "요청"과 "응답"을 통해 이루어지며 "역할"은 "책임"의 집합이라는 것입니다.
- 예를 들어 바리스타라는 역할은 커피를 만들어야 하는 책임을 가지며 다른 음료도 만들어야 하는 책임을 가지게 됩니다.
- 하지만 이 책임들은 모두 바리스타의 역할에 기반 해야 하며, 예를들어 녹즙을 만드는 책임은 바리스타 역할에 어울리지 않습니다.  
- 이렇듯 역할에 맞는 적절한 책임을 부여하는 것은 객체지향 설계의 시작에서 가장 중요한 점 중 하나입니다.

자율적인 객체
- 객체들끼리 협력하기 위해서는 첫번째로 객체는 충분히 "협력적"이어야 하고 두번째는 충분히 "자율적"이어야 합니다.
- 실세계에서도 사람들은 외부에 영향을 받지만 선택은 자신이 하는 것처럼 객체들 또한 스스로의 행동과 판단에 자율적이어야합니다.
- 자율적인 객체는 "상태"와 "행동"이라는 두가지 특성을 가지며 어떠한 "상태"를 기반으로 특정한 "행동"을 자율적으로 선택하는 객체로 다시금 표현이 가능합니다.


퀴즈
1.
2.
3.
