[ 협력과 메시지 ]

클라이언트-서버 모델 : 클라이언트가 서버의 서비스를 요청하는 단방향 상호작용
두 객체 사이의 협력을 가능하게 해주는 매개체가 메시지다.

[ 메시지와 메시지 전송 ]

메시지 : 객체들이 협력하기 위해 사용할 수 있는 의사소통 수단
메시지 전송 또는 패싱 : 한 객체가 다른 객체에게 도움을 요청하는것
메시지 전송자 : 메시지를 전송하는 객체
메시지 수신자 : 메시지를 수신하는 객체

메시지는 operation명, 인자로 구성되며 메시지 전송은 여기에 메시지 수신자를 추가한 것
JAVA의 경우 condition(수신자).isSatisfiedBy(오퍼레이션명)(screening);(인자)

[메시지와 메서드]

메시지를 수신했을 때 실제로 실행되는 함수를 메서드라고 부른다.
코드상에서 동일한 이름의 변수에게 동일한 메시지를 전송하더라도 객체의 타임에 따라 실행되는 메서드가 달라 질 수 있음
코드의 의미가 컴파일 시점과 실행시점에 동일해야한다는 것이다. 반면 객체는 메시지와 메서드라는 두가지
서로 다른 개념을 실행 시점에 연결해야 하기 때문에 컴파일 시점과 실행 시점의 의미가 달라질 수 있음


[퍼블릭 인터페이스와 오퍼레이션]
퍼블릭 인터페이스 : 객체가 의사소통을 위해 외부에 공개하는 메시지의 집합
객체가 수신할 수 있는 메시지가 객체의 퍼블릭 인터페이스와 그 안에 포함될 오퍼레이션을 결정한다는 것이다
메시지가 객체의 품질을 결정한다.

[시그니처]
: 오퍼레이션의 이름과 파라미터 목록을 합친것
오퍼레이션의 관점에서 다형성이란 동일한 오퍼레이션 호출에 대해 서로 다른 메서드들이 실행되는것이라 정의할 수 있다.

[디미터 법칙]
: 객체의 내부 구조에 대한 결합으로 인해 발생하는 설계 문제를 해결하기 위해 제안된 원칙 -> 객체의 내부 구조에
강하게 결합되지 않도록 협력 경로를 제한하라

[의도를 드러내는 인터페이스]
- 메서드가 작업을 어떻게 수행하는지 나타내도록 이름짓는 것은 좋지 않음
메서드에 대해 제대로 커뮤니케이션하지 못함, 메서드 수준에서 캡슐화를 위반

메서드의 이름을 짓는 두번째 방법은 '어떻게'기 아니라 '무엇'을 하는지 드러내는것이다.

- 객체가 협력안에서 수행해야 하는 책엠에 관해 고민해야함

[명령-쿼리 분리 법칙]
명령과 쿼리를 분리하기 위해서 다음 두가지 규칙을 준수해야 한다.
- 객체의 상태를 변경하는 명령은 반환값을 가질 수 없다
- 객체의 정보를 반환하는 쿼리는 상태를 변경할 수 없다 
-> 명령은 상태를 변경할 수 있지만 상태를 반환해서는 안된다. 
