[프로시저 추상화와 데이터 추상화]
프로시저 추상화 : 소프트웨어가 무엇을 해야하는지 추상화
  - 기능분해, 알고리즘분해 
데이터 추상화 : 소프트웨어가 무엇을 알아야 하는지 추상화
  - 타입을 추상화 -> 추상 데이터 타입
  - 프로시저를 추상화 -> 객체지형
  
  [프로시저 추상화와 기능 분해]
  기능을 중심으로 필요한 데이터를 결정한다.
  먼저 필요한 기능을 생각하고 이 기능을 분해하고 정제하는 과정에서 필요한 데이터의 종류와 저장 방식을 식별
  -> 유지보수에 다양한 문제 야기
  
  하향식 기능 분해는 시스템을 최사위의 가장 추상적인 메인함수로 정의하고, 메인 함수를 구현 가능한 수준까지
  세부적인 단계로 분해하는 방법
  
  문제점
  - 시스템은 하나의 메인함수로 구성 엑스
  - 기능추가, 요구사항 변경시 메인함수를 빈번하게 수정해야함
  - 비즈니스 로직이 사용자 인터페이스와 강하게 결합
  - 함수 실행순서를 고정시켜서 유연성과 재사용성이 저하
  - 데이터 형식이 변경될 경우 파급효과를 예측할 수 없다.


[클래스]
클래스와 추상 데이터 타입 -> 모두 외부에서는 객체의 내부 속성에 직접 접근할 수 없으며 오직 퍼블릭 
인터페이스를 통해서만 외부와 소통할 수 있다.
차이 : 클래스는 상속과 다형성을 지원하는 데 비해 추상 데이터 타입은 지원하지 못한다.

